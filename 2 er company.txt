2: Draw an ER for Company database with atleast 4 entities and convert them into tables.
Perform DDL on Above converted tables.
1. Create tables with all constraints
2. create views on any two tables using conditions
3. create  index called EmployeeId  for the department table. Entries should be in ascending order by department id and then by  employee id within each department.
4. create sequence on Employee id.


-- 1. Create Tables

-- Department table (created first to avoid FK conflict)
CREATE TABLE Department (
    DepartmentId INT PRIMARY KEY,
    DepartmentName VARCHAR(50) NOT NULL,
    ManagerId INT
    -- ManagerId will reference EmployeeId after Employee table is created
);

-- Employee table
CREATE TABLE Employee (
    EmployeeId INT PRIMARY KEY,
    EmployeeName VARCHAR(50) NOT NULL,
    DepartmentId INT,
    Salary DECIMAL(10,2) NOT NULL,
    JoinDate DATE NOT NULL,
    FOREIGN KEY (DepartmentId) REFERENCES Department(DepartmentId)
);

-- Add foreign key for ManagerId now (after Employee table is created)
ALTER TABLE Department
ADD CONSTRAINT FK_Manager
FOREIGN KEY (ManagerId) REFERENCES Employee(EmployeeId);

-- Project table
CREATE TABLE Project (
    ProjectId INT PRIMARY KEY,
    ProjectName VARCHAR(50) NOT NULL,
    StartDate DATE NOT NULL,
    EndDate DATE
);

-- WorksOn table
CREATE TABLE WorksOn (
    EmployeeId INT,
    ProjectId INT,
    HoursWorked INT NOT NULL,
    PRIMARY KEY (EmployeeId, ProjectId),
    FOREIGN KEY (EmployeeId) REFERENCES Employee(EmployeeId),
    FOREIGN KEY (ProjectId) REFERENCES Project(ProjectId)
);

-- 2. Create Views

-- View 1: Employee with Department Info
CREATE VIEW EmployeeDepartmentView AS
SELECT e.EmployeeId, e.EmployeeName, d.DepartmentName, e.Salary
FROM Employee e
JOIN Department d ON e.DepartmentId = d.DepartmentId;

-- View 2: Employees working on Projects
CREATE VIEW ProjectEmployeeView AS
SELECT p.ProjectId, p.ProjectName, e.EmployeeName, w.HoursWorked
FROM Project p
JOIN WorksOn w ON p.ProjectId = w.ProjectId
JOIN Employee e ON w.EmployeeId = e.EmployeeId;

-- 3. Create Index

CREATE INDEX EmployeeId_Index
ON Employee (DepartmentId ASC, EmployeeId ASC);

-- 4. Create Sequence for EmployeeId

CREATE SEQUENCE EmployeeId_Seq
START WITH 101
INCREMENT BY 1
NOCACHE;

sudo rm -f /var/log/syslog
sudo rm -f /var/log/kern.log



Entities and Attributes:
Department
DepartmentId, DepartmentName, ManagerId
Employee
EmployeeId, EmployeeName, DepartmentId, Salary, JoinDate
Project
ProjectId, ProjectName, StartDate, EndDate
WorksOn (Associative Entity)
EmployeeId, ProjectId, HoursWorked
Relationships:
One Department has many Employees
One Employee can manage one Department (ManagerId refers to EmployeeId)
One Employee can work on many Projects
One Project can have many Employees
The WorksOn table represents a many-to-many relationship between Employee and Project

